-- Tabela 01 - Armazena informações sobre os clientes.

CREATE TABLE clientes(
  Clienteid serial PRIMARY KEY,
  Nome VARCHAR(100) NOT NULL,
  Email VARCHAR(100) UNIQUE NOT NULL,
  DataNacimento DATE NOT NULL,
  Cidade VARCHAR(50) NOT NULL
  );
  
  -- Tabela 02 - Armazena informações sobre os produtos.
  
  CREATE TABLE Produtos(
    
    Produtoid serial PRIMARY KEY,
    Nomeproduto VARCHAR(100) NOT NULL,
    Categoria VARCHAR(60),
    Preco DECIMAL(10,2),
    Estoque INT 
    
    );
  
    -- Tabela 03 - Armazena informações sobre os pedidos feitos pelos clientes.
    
 CREATE TABLE Pedidos(
   Pedidosid SERIAL PRIMARY KEY,
   Clienteid INT REFERENCES clientes(Clienteid),
   Datapedido DATE,
   Valortotal DECIMAL(10,2)
   
   );

-- Tabela 04 - Armazena detalhes dos itens de cada pedido.

CREATE TABLE Itenspedido(
  Itemid Serial PRIMARY KEY,
  Pedidoid INT REFERENCES Pedidos(Pedidosid),
  Produtoid INT REFERENCES produtos(Produtoid),
  Quantidades INT,
  Precounico DECIMAL(10,2)
  
  );
  
                -- Questões sobre Funções (Functions):--
                
  -- Q1 Crie uma função chamada CalcularIdade que receba a data de nascimento de um cliente e retorne à idade atual.
  
    CREATE OR REPLACE FUNCTION CalcularIdade(Data_nacimento DATE)
  RETURNS INT 
  LANGUAGE plpgsql
  AS $$
  
  DECLARE
      Idade INT;
  BEGIN
      Idade := EXTRACT(YEAR FROM AGE(CURRENT_DATE, Data_nacimento));
      RETURN Idade;
  END;
  $$;
  
  
   -- Q2 Crie uma função chamada VerificarEstoque que receba o ProdutoID e retorne a quantidade em estoque daquele produto.
    
    CREATE OR REPLACE FUNCTION Verificarestoque(produto_id INT)
 RETURNS INT 
 LANGUAGE plpgsql
 AS $$
 DECLARE 
       Quant_estoq INT;
 BEGIN
    SELECT Estoq INTO Quant_estoq
    FROM produtos
    WHERE produto_id;
    
    RETURN Quant_estoq; 
END;
$$;

-- Q3 Crie uma função chamada CalcularDesconto que receba o ProdutoID e um percentual de desconto, e retorne o preço final do produto após aplicar o desconto.

CREATE OR REPLACE FUNCTION CalcularDesconto(Produto_id INT, Percentual_desc DECIMAL)
RETURNS DECIMAL
LANGUAGE plpgsql
AS $$
DECLARE
    Preco_origInal DECIMAL;
    Preco_final DECIMAL;
BEGIN
    SELECT Preco INTO Preco_original
    FROM Produtos
    WHERE produtoid = Produto_id;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Produto com ID % não encontrado', Produto_id;
        IF NOT FOUND THEN
    END IF;
        
    preco_final := Preco_original * (1 - Percentual_desc / 100);

    RETURN Preco_final;
END;
$$;

  
 -- Q4 4. Crie uma função chamada ObterNomeCliente que receba o ClienteID e retorne o nome
-- completo do cliente.

CREATE OR REPLACE FUNCTION ObterNomeCliente(clienteID INT)
RETURNs VARCHAR 
LANGUAGE plpgsql
AS $$
DECLARE
    Nomecompleto VARCHAR;
BEGIN
    SELECT Nome INTO Nomecompleto
    FROM clientes
    WHERE Clienteid = ClienteID;
  
     IF NOT FOUND THEN
        RAISE EXCEPTION 'Produto com ID % não encontrado', ClienteID;
    END IF;
    
    RETURN Nomecompleto;
END;
$$;

-- Q5 -- Crie uma função chamada CalcularFrete que receba o valor total de um pedido e a cidade do cliente. Se a cidade for "São Paulo", o frete deve ser 5% do valor do pedido; para outras cidades, deve ser 10%. Use IF ELSE para definir a taxa de frete.

CREATE OR REPLACE FUNCTION CalcularFrete(ValorTotal DECIMAL, Cidade VARCHAR)
RETURNs DECIMAL
LANGUAGE plpgsql
AS $$
DECLARE
    Frete DECIMAL;
BEGIN
 IF Cidade = 'São Paulo' THEN
       Frete := ValorTotal * 0.05; 
    ELSE
      Frete := ValorTotal * 0.10;
    END IF;
    RETURN Frete;
    
END;
$$;

-- Tabela 06 - Crie uma função chamada CalcularPontos que receba um ClienteID e percorra todos os pedidos do cliente. Para cada pedido, se o valor total for maior que R$ 100, adicione 10
-- pontos; se for menor ou igual, adicione 5 pontos. Retorne o total de pontos acumulados
--pelo cliente. Use FOR e IF ELSE.

DROP FUNCTION IF EXISTS Calcularpontos_po; 
CREATE or REPLACE FUNCTION Calcularpontos_po(cliente_id INT) 

LANGUAGE plpgsql
RETURN INT
AS $$
   valorpedido NUMERIC;
   pedido_record RECORD;
BEGIN
FOR pedido_record IN 
    SELECT Valortotal
    from pedidos
    WHERE cliente_id = cliente_id
LOOP
        valor_pedido := pedido_record.valor_total;

        IF valor_pedido > 100 THEN
            total_pontos := total_pontos + 10;
        ELSE
            total_pontos := total_pontos + 5;
        END IF;
    END LOOP;
   
    RETURN total_pontos;
  

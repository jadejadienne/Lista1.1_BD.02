-- Tabela 01 - Armazena informações sobre os clientes.

CREATE TABLE clientes(
  Clienteid serial PRIMARY KEY,
  Nome VARCHAR(100) NOT NULL,
  Email VARCHAR(100) UNIQUE NOT NULL,
  DataNacimento DATE NOT NULL,
  Cidade VARCHAR(50) NOT NULL
  );
  
  -- Tabela 02 - Armazena informações sobre os produtos.
  
  CREATE TABLE Produtos(
    
    Produtoid serial PRIMARY KEY,
    Nomeproduto VARCHAR(100) NOT NULL,
    Categoria VARCHAR(60),
    Preco DECIMAL(10,2),
    Estoque INT 
    
    );
  
    -- Tabela 03 - Armazena informações sobre os pedidos feitos pelos clientes.
    
 CREATE TABLE Pedidos(
   Pedidosid SERIAL PRIMARY KEY,
   Clienteid INT REFERENCES clientes(Clienteid),
   Datapedido DATE,
   Valortotal DECIMAL(10,2)
   
   );

-- Tabela 04 - Armazena detalhes dos itens de cada pedido.

CREATE TABLE Itenspedido(
  Itemid Serial PRIMARY KEY,
  Pedidoid INT REFERENCES Pedidos(Pedidosid),
  Produtoid INT REFERENCES produtos(Produtoid),
  Quantidades INT,
  Precounico DECIMAL(10,2)
  
  );
  
                -- Questões sobre Funções (Functions):--
                
  -- Q1 Crie uma função chamada CalcularIdade que receba a data de nascimento de um cliente e retorne à idade atual.
  
    CREATE OR REPLACE FUNCTION CalcularIdade(Data_nacimento DATE)
  RETURNS INT AS $$
  
  DECLARE
      Idade INT;
  BEGIN
      Idade := EXTRACT(YEAR FROM AGE(CURRENT_DATE, Data_nacimento));
      RETURN Idade;
  END;
  $$ LANGUAGE plpgsql;
  
  
   -- Q2 Crie uma função chamada VerificarEstoque que receba o ProdutoID e retorne a quantidade em estoque daquele produto.
    
    CREATE OR REPLACE FUNCTION Verificarestoque(produto_id INT)
 RETURNS INT AS $$
 DECLARE 
       Quant_estoq INT;
 BEGIN
    SELECT Estoq INTO Quant_estoq
    FROM produtos
    WHERE produto_id;
    
    RETURN Quant_estoq; 
END;
$$ LANGUAGE plpgsql;

-- Q3 Crie uma função chamada CalcularDesconto que receba o ProdutoID e um percentual de
---desconto, e retorne o preço final do produto após aplicar o desconto.
    
 CREATE OR REPLACE FUNCTION CalcularDes(Produto_id INT, Percentual_desc DECIMAL)
RETURNS DECIMAL AS $$
DECLARE
    Preco_orig DECIMAL;
    Preco_final DECIMAL;
BEGIN
   
    SELECT Preco INTO Preco_orig
    FROM Produtos
    WHERE produtoid = Produto_id;


    preco_final := Preco_orig * (1 - Percentual_desc / 100);

    RETURN Preco_final;
END;
$$ LANGUAGE plpgsql;

  
  



  

-- Tabela 01 - Armazena informações sobre os clientes.

CREATE TABLE clientes(
  Clienteid serial PRIMARY KEY,
  Nome VARCHAR(100) NOT NULL,
  Email VARCHAR(100) UNIQUE NOT NULL,
  DataNacimento DATE NOT NULL,
  Cidade VARCHAR(50) NOT NULL
  );
  
  -- Tabela 02 - Armazena informações sobre os produtos.
  
  CREATE TABLE Produtos(
    
    Produtoid serial PRIMARY KEY,
    Nomeproduto VARCHAR(100) NOT NULL,
    Categoria VARCHAR(60),
    Preco DECIMAL(10,2),
    Estoque INT 
    
    );
  
    -- Tabela 03 - Armazena informações sobre os pedidos feitos pelos clientes.
    
 CREATE TABLE Pedidos(
   Pedidosid SERIAL PRIMARY KEY,
   Clienteid INT REFERENCES clientes(Clienteid),
   Datapedido DATE,
   Valortotal DECIMAL(10,2)
   
   );

-- Tabela 04 - Armazena detalhes dos itens de cada pedido.

CREATE TABLE Itenspedido(
  Itemid Serial PRIMARY KEY,
  Pedidoid INT REFERENCES Pedidos(Pedidosid),
  Produtoid INT REFERENCES produtos(Produtoid),
  Quantidades INT,
  Precounico DECIMAL(10,2)
  
  );
  
                -- Questões sobre Funções (Functions):--
                
  -- Q1 Crie uma função chamada CalcularIdade que receba a data de nascimento de um cliente e retorne à idade atual.
  
    CREATE OR REPLACE FUNCTION CalcularIdade(Data_nacimento DATE)
  RETURNS INT AS $$
  
  DECLARE
      Idade INT;
  BEGIN
      Idade := EXTRACT(YEAR FROM AGE(CURRENT_DATE, Data_nacimento));
      RETURN Idade;
  END;
  $$ LANGUAGE plpgsql;
  
  
   -- Q2 Crie uma função chamada VerificarEstoque que receba o ProdutoID e retorne a quantidade em estoque daquele produto.
    
    CREATE OR REPLACE FUNCTION Verificarestoque(produto_id INT)
 RETURNS INT AS $$
 DECLARE 
       Quant_estoq INT;
 BEGIN
    SELECT Estoq INTO Quant_estoq
    FROM produtos
    WHERE produto_id;
    
    RETURN Quant_estoq; 
END;
$$ LANGUAGE plpgsql;

-- Q3 Crie uma função chamada CalcularDesconto que receba o ProdutoID e um percentual de desconto, e retorne o preço final do produto após aplicar o desconto.

CREATE OR REPLACE FUNCTION CalcularDesconto(Produto_id INT, Percentual_desc DECIMAL)
RETURNS DECIMAL 
LANGUAGE plpgsql
AS $$
DECLARE
    Preco_original DECIMAL;
    Preco_final DECIMAL;
BEGIN
    SELECT Preco INTO Preco_original
    FROM Produtos
    WHERE produtoid = Produto_id;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Produto com ID % não encontrado', Produto_id;
    END IF;
    
    Preco_final := Preco_original * (1 - Percentual_desc / 100);
    
    RETURN Preco_final;
END;
$$;
  
 -- Q4 4. Crie uma função chamada ObterNomeCliente que receba o ClienteID e retorne o nome completo do cliente.

CREATE OR REPLACE FUNCTION ObterNomeCliente(clienteID INT)
RETURNs VARCHAR 
LANGUAGE plpgsql
AS $$
DECLARE
    Nomecompleto VARCHAR;
BEGIN
    SELECT Nome INTO Nomecompleto
    FROM clientes
    WHERE Clienteid = ClienteID;
  
     IF NOT FOUND THEN
        RAISE EXCEPTION 'Produto com ID % não encontrado', ClienteID;
    END IF;
    
    RETURN Nomecompleto;
END;
$$;


 -- Q5 -- Crie uma função chamada CalcularFrete que receba o valor total de um pedido e a cidade
--do cliente. Se a cidade for "São Paulo", o frete deve ser 5% do valor do pedido; para outras
--cidades, deve ser 10%. Use IF ELSE para definir a taxa de frete.

CREATE OR REPLACE FUNCTION CalcularFrete(ValorTotal DECIMAL, Cidade VARCHAR)
RETURNs DECIMAL
LANGUAGE plpgsql
AS $$
DECLARE
    Frete DECIMAL;
BEGIN
 IF Cidade = 'São Paulo' THEN
       Frete := ValorTotal * 0.05; 
    ELSE
      Frete := ValorTotal * 0.10;
    END IF;
    RETURN Frete;
    
END;
$$;
  
 -- Q6 -- Crie uma função chamada CalcularPontos que receba um ClienteID e percorra todos os
--pedidos do cliente. Para cada pedido, se o valor total for maior que R$ 100, adicione 10
--pontos; se for menor ou igual, adicione 5 pontos. Retorne o total de pontos acumulados
-- pelo cliente. Use FOR e IF ELSE. 

CREATE OR REPLACE FUNCTION CalcularPontos(ClienteID INT)
RETURNS INT 
LANGUAGE plpgsql
AS $$
DECLARE
    TotalPontos INT := 0;
    ValorTotal DECIMAL;
    Pedido RECORD;
BEGIN
  
    FOR Pedido IN
        SELECT Valortotal
        FROM Pedidos
        WHERE Clienteid = ClienteID
    LOOP
 
        IF Pedido.Valortotal > 100 THEN
            TotalPontos := TotalPontos + 10;
        ELSE
            TotalPontos := TotalPontos + 5;
        END IF;
    END LOOP;

    RETURN TotalPontos;
END;
$$;

  
    --Questões sobre Procedimentos Armazenados (Stored Procedures)--
-- Q1 Crie um procedimento chamado AtualizarEstoqueEmMassa que receba uma lista de ProdutoID e uma quantidade a ser adicionada ao estoque de cada produto. O
--procedimento deve usar um loop FOR para percorrer cada ProdutoID e atualizar o estoque.
 
CREATE OR REPLACE PROCEDURE AtualizarEstoqueEmMassa(
    Proc_produto_ids INT[],     
    Proc_quant_add INT           
)
LANGUAGE plpgsql
AS $$
DECLARE
    Produto_id INT;             
BEGIN

    FOR Produto_id IN
        SELECT UNNEST(Proc_produto_ids)
    LOOP
    
        UPDATE estoque
        SET quantidade = quantidade + Proc_quant_add
        WHERE produto_id = Produto_id;
    END LOOP;
END;
$$;

-- 2. Crie um procedimento chamado InserirCliente que insira um novo cliente na tabela Clientes.

CREATE OR REPLACE PROCEDURE InserirCliente(
    p_nome TEXT,
    p_email TEXT,
    p_telefone TEXT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO Clientes (nome, email, telefone)
    VALUES (p_nome, p_email, p_telefone);
END;
$$;

--3. Crie um procedimento chamado RealizarPedido que insira um novo pedido na tabela Pedidos e os itens correspondentes na tabela ItensPedido. 

CREATE OR REPLACE PROCEDURE RealizarPedido(
    p_data DATE,
    p_cliente_id INT,
    p_itens JSONB 
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_pedido_id INT; 
    v_item JSONB;
BEGIN
    INSERT INTO Pedidos (data, cliente_id)
    VALUES (p_data, p_cliente_id)
    RETURNING id INTO v_pedido_id;

    FOR v_item IN SELECT * FROM jsonb_array_elements(p_itens)
    LOOP
        INSERT INTO ItensPedido (pedido_id, produto_id, quantidade, preco)
        VALUES (
            v_pedido_id,
            (v_item->>'produto_id')::INT,
            (v_item->>'quantidade')::INT,
            (v_item->>'preco')::DECIMAL
        );
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
$$;

-- 4. Crie um procedimento chamado ExcluirCliente que exclua um cliente da tabela Clientes e todos os pedidos associados a esse cliente.

CREATE OR REPLACE PROCEDURE ExcluirCliente(
    p_cliente_id INT 
)
LANGUAGE plpgsql
AS $$
BEGIN
  
    DELETE FROM Pedidos
    WHERE cliente_id = p_cliente_id;

    DELETE FROM Clientes
    WHERE id = p_cliente_id;

EXCEPTION

    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
$$;

-- 5 Crie um procedimento chamado AtualizarPrecoProduto que receba o ProdutoID e o novo preço, e atualize o preço do produto na tabela Produtos

CREATE OR REPLACE PROCEDURE AtualizarPrecoProduto(
    p_produto_id INT,   
    p_novo_preco DECIMAL 
)
LANGUAGE plpgsql
AS $$
BEGIN

    UPDATE Produtos
    SET preco = p_novo_preco
    WHERE id = p_produto_id;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Produto com ID % não encontrado', p_produto_id;
    END IF;

END;
$$;

-- 6. Crie um procedimento chamado InserirClienteComVerificacao que receba os dados de um cliente (Nome, Email, DataNascimento, Cidade). Antes de inserir o cliente, verifique se o email já existe na tabela Clientes. Se existir, não insira e retorne uma mensagem de erro. Use DECLARE para declarar variáveis e IF ELSE para a verificação.

CREATE OR REPLACE PROCEDURE InserirClienteComVerificacao(
    p_nome TEXT,
    p_email TEXT,
    p_data_nascimento DATE,
    p_cidade TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_email_existente BOOLEAN;
BEGIN

    SELECT EXISTS (
        SELECT 1
        FROM Clientes
        WHERE email = p_email
    ) INTO v_email_existente;

    IF v_email_existente THEN
      
        RAISE EXCEPTION 'O e-mail % já está registrado.', p_email;
    ELSE
       
        INSERT INTO Clientes (nome, email, data_nascimento, cidade)
        VALUES (p_nome, p_email, p_data_nascimento, p_cidade);
    END IF;
END;
$$;
